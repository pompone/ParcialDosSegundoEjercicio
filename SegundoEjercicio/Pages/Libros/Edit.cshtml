@page "{id:int}"
@model SegundoEjercicio.Pages.Libros.EditModel
@attribute [Microsoft.AspNetCore.Authorization.Authorize(Roles = "Bibliotecario")]

@{
    ViewData["Title"] = "Editar libro";
    var hasErrors = !ViewData.ModelState.IsValid && ViewData.ModelState.ErrorCount > 0;
}
<h2>Editar libro</h2>

@if (TempData["Flash"] is string msg)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @msg
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@if (hasErrors)
{
    <div class="alert alert-danger" role="alert" aria-live="assertive">
               <div asp-validation-summary="All"></div>
        
    </div>
    
}

<form method="post" class="row g-3"
      onsubmit="this.querySelector('button[type=submit]')?.setAttribute('disabled','disabled');">
    <input type="hidden" asp-for="Book.Id" />

    <div class="col-md-6">
        <label asp-for="Book.Title" class="form-label"></label>
        <input asp-for="Book.Title" class="form-control" />
        <span asp-validation-for="Book.Title" class="text-danger"></span>
    </div>

    <!-- Autor con “Otro…” -->
    <div class="col-md-3">
        <label class="form-label">Autor</label>
        <select asp-for="Book.AuthorId" asp-items="Model.Authors" class="form-select" id="AuthorSelect">
            <option value="">-- Seleccionar --</option>
            <option value="__other">Otro…</option>
        </select>
        <input type="text"
               class="form-control mt-2 @(string.IsNullOrWhiteSpace(Model.NewAuthorName) ? "d-none" : "")"
               id="NewAuthorInput"
               name="NewAuthorName"
               value="@Model.NewAuthorName"
               placeholder="Escribí el nuevo autor"
               oninput="clearFieldError('NewAuthorName')" />
        <span class="text-danger" data-valmsg-for="NewAuthorName"></span>
    </div>

    <!-- Categoría con “Otro…” -->
    <div class="col-md-3">
        <label class="form-label">Categoría</label>
        <select asp-for="Book.CategoryId" asp-items="Model.Categories" class="form-select" id="CategorySelect">
            <option value="">-- Seleccionar --</option>
            <option value="__other">Otro…</option>
        </select>
        <input type="text"
               class="form-control mt-2 @(string.IsNullOrWhiteSpace(Model.NewCategoryName) ? "d-none" : "")"
               id="NewCategoryInput"
               name="NewCategoryName"
               value="@Model.NewCategoryName"
               placeholder="Escribí la nueva categoría"
               oninput="clearFieldError('NewCategoryName')" />
        <span class="text-danger" data-valmsg-for="NewCategoryName"></span>
    </div>

    <div class="col-md-2">
        <label asp-for="Book.PublishedYear" class="form-label"></label>
        <input asp-for="Book.PublishedYear" class="form-control" />
        <span asp-validation-for="Book.PublishedYear" class="text-danger"></span>
    </div>

    <div class="col-md-4">
        <label asp-for="Book.ISBN" class="form-label"></label>
        <input asp-for="Book.ISBN" class="form-control" />
        <span asp-validation-for="Book.ISBN" class="text-danger"></span>
    </div>

    <div class="col-md-2">
        <label asp-for="Book.CopiesAvailable" class="form-label"></label>
        <input asp-for="Book.CopiesAvailable" class="form-control" />
        <span asp-validation-for="Book.CopiesAvailable" class="text-danger"></span>
    </div>

    <div class="col-12">
        <button type="submit" class="btn btn-primary">Guardar cambios</button>
        <a class="btn btn-secondary" asp-page="Index">Volver</a>
    </div>
</form>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <style>
        .validation-summary-valid, .field-validation-valid {
            display: none;
        }

        input.input-validation-error, select.input-validation-error, textarea.input-validation-error {
            border-color: #dc3545 !important;
            background-image: none;
        }

        .field-validation-error {
            display: block;
            font-weight: 500;
        }
    </style>
    <script>
        const authorSel = document.getElementById('AuthorSelect');
        const authorInp = document.getElementById('NewAuthorInput');
        const catSel    = document.getElementById('CategorySelect');
        const catInp    = document.getElementById('NewCategoryInput');

        function clearFieldError(fieldName){
          const span = document.querySelector(`[data-valmsg-for='${fieldName}']`);
          if (span){
            span.innerText = '';
            span.classList.remove('field-validation-error');
            span.classList.add('field-validation-valid');
          }
        }

        function toggleOther(selectEl, inputEl, fieldName) {
          if (selectEl.value === '__other') {
            inputEl.classList.remove('d-none');
            inputEl.required = true;
            selectEl.name = 'Ignore_' + fieldName;
          } else {
            inputEl.classList.add('d-none');
            inputEl.required = false;
            inputEl.value = '';
            selectEl.name = fieldName;
          }
        }

        function init() {
          toggleOther(authorSel, authorInp, 'Book.AuthorId');
          toggleOther(catSel,    catInp,    'Book.CategoryId');
        }
        authorSel.addEventListener('change', () => toggleOther(authorSel, authorInp, 'Book.AuthorId'));
        catSel.addEventListener('change',    () => toggleOther(catSel,    catInp,    'Book.CategoryId'));
        init();

        // Mantener “Otro…” si hubo error
        const forceOtherAuthor   = @Model.ForceOtherAuthor.ToString().ToLower();
        const forceOtherCategory = @Model.ForceOtherCategory.ToString().ToLower();
        if (forceOtherAuthor)   { authorSel.value='__other'; authorSel.dispatchEvent(new Event('change')); }
        if (forceOtherCategory) { catSel.value='__other';    catSel.dispatchEvent(new Event('change')); }

        // Llevar foco al primer error
        (function focusFirstError(){
          const firstErrorInput = document.querySelector('.input-validation-error');
          const firstErrorMsg   = document.querySelector('.field-validation-error');
          const target = firstErrorInput || firstErrorMsg;
          if (target) {
            target.scrollIntoView({ behavior:'smooth', block:'center' });
            if (firstErrorInput) firstErrorInput.focus({ preventScroll:true });
          }
        })();
    </script>
}







